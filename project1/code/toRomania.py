# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'toRomania.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import QObject
from PyQt5.QtWidgets import QMainWindow,QLineEdit,QPushButton,QTextEdit,QLabel,QFileDialog,QApplication
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from dijkstra import Dijkstra
import time

class QEventHandler(QtCore.QObject):    #拖拽事件重载
    def eventFilter(self, obj, event):
        if event.type() == QtCore.QEvent.DragEnter:
            event.accept()
        if event.type() == QtCore.QEvent.Drop:
            md = event.mimeData()
            if md.hasUrls():
                url = md.urls()[0]
                obj.setText(url.toLocalFile())
                return True
        return super().eventFilter(obj, event)

class Ui_toThere(QtWidgets.QMainWindow):
    #存储地图信息
    mapimf = []
    #输出结果存储
    outroad = []
    outdist = {}
    #输出文件名
    opname = ''
    def setupUi(self, toThere):
        toThere.setObjectName("toThere")
        toThere.resize(563, 704)
        self.centralwidget = QtWidgets.QWidget(toThere)
        self.centralwidget.setObjectName("centralwidget")
        self.put = QtWidgets.QLineEdit(self.centralwidget)
        self.put.setGeometry(QtCore.QRect(20, 20, 521, 31))
        self.put.setObjectName("put")
        self.btn1 = QtWidgets.QPushButton(self.centralwidget)
        self.btn1.setGeometry(QtCore.QRect(20, 60, 351, 31))
        self.btn1.setObjectName("btn1")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 100, 521, 331))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 480, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(100, 480, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.lineEdit.setFont(font)
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(210, 480, 61, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(280, 480, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.btn3 = QtWidgets.QPushButton(self.centralwidget)
        self.btn3.setGeometry(QtCore.QRect(390, 480, 151, 31))
        self.btn3.setObjectName("btn3")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 520, 521, 131))
        self.textEdit.setObjectName("textEdit")
        self.btn2 = QtWidgets.QPushButton(self.centralwidget)
        self.btn2.setGeometry(QtCore.QRect(20, 440, 351, 31))
        self.btn2.setObjectName("btn2")
        self.sbtn1 = QtWidgets.QPushButton(self.centralwidget)
        self.sbtn1.setGeometry(QtCore.QRect(380, 60, 161, 31))
        self.sbtn1.setObjectName("sbtn1")
        self.sbtn2 = QtWidgets.QPushButton(self.centralwidget)
        self.sbtn2.setGeometry(QtCore.QRect(380, 440, 161, 31))
        self.sbtn2.setObjectName("sbtn2")
        toThere.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(toThere)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 481, 22))
        self.menubar.setObjectName("menubar")
        toThere.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(toThere)
        self.statusbar.setObjectName("statusbar")
        toThere.setStatusBar(self.statusbar)
        self.setWindowTitle("ToThere")
        #导入地图
        self.btn2.clicked.connect(self.loadMap)
        #导入地图信息
        self.btn1.clicked.connect(self.loadMpimf)
        #允许拖拽
        self.put.setAcceptDrops(True)
        self.put.installEventFilter(QEventHandler(self))
        self.label.setAcceptDrops(True)
        self.label.installEventFilter(QEventHandler(self))
        self.sbtn2.clicked.connect(self.sbMap)
        self.sbtn1.clicked.connect(self.sbMapIm)
        #进行运算
        self.btn3.clicked.connect(self.doSearch)
        
        self.retranslateUi(toThere)
        QtCore.QMetaObject.connectSlotsByName(toThere)

    def retranslateUi(self, toThere):
        _translate = QtCore.QCoreApplication.translate
        toThere.setWindowTitle(_translate("toThere", "MainWindow"))
        self.put.setText(_translate("toThere", "Please enter or drag the map information path"))
        self.label.setText(_translate("toThere", "Please enter or drag the map path"))
        self.btn1.setText(_translate("toThere", "Import the map information"))
        self.label_2.setText(_translate("toThere", "start"))
        self.label_3.setText(_translate("toThere", "end"))
        self.btn3.setText(_translate("toThere", "Search"))
        self.btn2.setText(_translate("toThere", "Import the map "))
        self.sbtn1.setText(_translate("toThere", "Submit"))
        self.sbtn2.setText(_translate("toThere", "Submit"))

    def loadMap(self):    #地图导入
        fname, _ = QFileDialog.getOpenFileName(self, '选择地图', 'c:\\', 'Image files(*.jpg *.gif *.png)')
        self.label.setPixmap(QPixmap(fname))
    
    def loadMpimf(self):    #地图信息导入
        self.mapimf.clear()
        self.outdist.clear()
        self.outroad.clear()
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.AnyFile)
        dlg.setFilter(QDir.Files)
        if dlg.exec_():
            self.textEdit.append("Importing map's information")
            filenames = dlg.selectedFiles()
            f = open(filenames[0], 'r')
            with f:
                for line in f.readlines() :
                    self.textEdit.append(line.rstrip())
                    self.mapimf.append(line.rstrip())    
            self.textEdit.append("Successfully Imported!")  
            self.textEdit.append("-------------------------------------------------------------\n") 
            self.opname = self.mapimf[1].split()[0].split()[0]+self.mapimf[1].split()[1].split()[0]+'.txt'
            with open(self.opname,'a') as optxt :
                optxt.write(self.textEdit.toPlainText())
            optxt.close()
    
    def sbMap(self) :   #拖拽导入地图
        tempic = self.label.text()
        self.label.setPixmap(QPixmap(tempic))
        
    def sbMapIm(self) :   #拖拽导入地图信息 
        self.mapimf.clear()
        self.outdist.clear()
        self.outroad.clear()
        if self.put.text() !="Please enter or drag the map information path" :
            self.textEdit.append("Importing map's information")
            f = open(self.put.text(), 'r')
            with f:
                for line in f.readlines() :
                    self.textEdit.append(line.rstrip())
                    self.mapimf.append(line.rstrip()) 
            self.textEdit.append("Successfully Imported!")
        else :
            self.textEdit.append("Please enter or drag the map information path")
        self.textEdit.append("-------------------------------------------------------------\n")
        self.opname = self.mapimf[1].split()[0].split()[0]+self.mapimf[1].split()[1].split()[0]+'.txt'
        with open(self.opname,'a') as optxt :
            optxt.write(self.textEdit.toPlainText()) 
        optxt.close()   
        
    def doSearch(self) :
        tstart = time.time()
        temps = self.lineEdit.text()
        tempe = self.lineEdit_2.text()
        if  not bool(self.mapimf) :
            self.textEdit.append("Please input the map's information") 
            return
        with open(self.opname,'a') as optxt :
            if (temps != '')&(tempe != '') :
                tempmap = self.mapimf[1:]
                try :
                    self.outdist, self.outroad, newbegin, newend = Dijkstra(self.mapimf[0], tempmap, temps,tempe)
                    tend = time.time()
                except Exception as e :
                    self.textEdit.append("EXCEPT : "+str(e)) 
                    self.textEdit.append("This may be caused by the wrong format of the input file")  
                    self.textEdit.append(" Please follow 'Readme.md' ")   
                if not bool(self.outdist):
                    self.textEdit.append("Please input the correct vertex") 
                    optxt.write("Please input the correct vertex\n")
                    self.textEdit.append("-------------------------------------------------------------")
                    optxt.write("-------------------------------------------------------------\n") 
                    return
                tempr = self.outroad[0]
                for i in self.outroad[1:] :
                    tempr += ' -> '+i
                self.textEdit.append("The shortest route from "+newbegin+" to "+newend+" is : \n"+tempr)
                optxt.write("The shortest route from "+newbegin+" to "+newend+" is : \n"+tempr+'\n')
                self.textEdit.append("The shortest distanace is : "+str(self.outdist[newend])) 
                optxt.write("The shortest distanace is : "+str(self.outdist[newend])+'\n')
                self.textEdit.append("-------------------------------------------------------------")
                optxt.write("-------------------------------------------------------------\n") 
                self.textEdit.append("running time : "+str(tend-tstart)+'\n')
                optxt.write("running time : "+str(tend-tstart)+'\n') 
            else :
                self.textEdit.append("Please enter your starting point or destination")  
                optxt.write("Please enter your starting point or destination+\n")  
        optxt.close()          
